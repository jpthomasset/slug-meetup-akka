#+TITLE: Akka't the feeling
#+OPTIONS: num:nil
#+OPTIONS: toc:nil 
#+OPTIONS: reveal_title_slide:nil
#+OPTIONS: reveal_slide_number:nil
#+REVEAL_HLEVEL: 1
#+REVEAL_THEME: solarized
#+REVEAL_EXTRA_CSS: style.css

* Akka't the feeling
A humble feedback on Akka after some time in production

* Who are we ?
[[./img/logo_avencall.png]]
- Open source software editor
- 7 developers across two locations (Lyon / Prague)
- Mostly junior in Scala

** XiVO Solution
[[./img/logo_xivo.png]]

- Open Source IPBX based on Asterisk™ 
- Phone Device Management
- Call routing
- Call Center Solution 
- Computer telephony Integration

** XiVO Architecture overview
[[./img/xivo-overview.png]]

** XUC Server
- Real time message processing application
- Using Akka
- Expose API through Websocket & Rest.

* Akka
#+BEGIN_QUOTE
“Akka is a toolkit for building highly concurrent, distributed, and resilient message-driven applications for Java and Scala”

    -- http://akka.io/
#+END_QUOTE

** Akka Basics
#+BEGIN_QUOTE
“Akka is /the/ implementation of the Actor Model on the JVM.
- Simpler Concurrent & Distributed Systems
- Resilient
- High Performance
- Elastic & Decentralized”
#+END_QUOTE

#+ATTR_REVEAL: :frag appear
#+BEGIN_QUOTE
“Multi-threading for dummies” @@html:<div align="right"><i>Jean-Yves Lebleu</i></div>@@
#+END_QUOTE

** Actors
Actors can:
#+ATTR_REVEAL: :frag (appear)
- Receive messages
- Do things
- Send messages

#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC scala
class HelloActor extends Actor {
  override def receive = {
    case "Hello" =>
      sender ! "Hi !"
}
#+END_SRC

** A +call+ tell B
[[./img/a_tell_b.png]]

Simple use cases are easy to implement but complexity kicks pretty soon.

** A +call+ tell B (continued)
#+BEGIN_SRC scala
case class Hello(name: String)
case class Greetings(message: String)

class HelloActor(greetingsRef: ActorRef) {
  override def preStart: Unit = {
    greetingsRef ! Hello("Jean-Pierre")
  }

  override def receive = {
    case Greetings(message) =>
      println(s"$greetingsRef told $message")
  }
}

class GreetingsActor extends Actor {
  override def receive = {
    case Hello(name) =>
      // I can do something here...
      sender ! Greetings(s"Hi $name!")
}
#+END_SRC

** Actors message processing
Akka guarantees for Actors:
- Only one message processed at a time
- No concurrency inside an actor
- At-most-once delivery
- Message ordering per *sender-receiver pair*


* Akka @ Avencall
#+BEGIN_QUOTE
Akka is a toolkit for building highly concurrent, +distributed+, and resilient message-driven applications for +Java and+ Scala

    -- http://akka.io/
#+END_QUOTE

* Actor Hierarchy 
One of our major problem was designing the Actor Hierarchy.

[[./img/no_hierarchy.png]]

Or the lack of designing process...

** Actor Hierarchy
Is /the/ key to have a resilient and understandable system...

- Actors dependency / discovery
- Startup / Shutdown
- Recovery
- Message path

** Actor Hierarchy - Designing
[[./img/hierarchy.png]]

Designing will help you:
- Split concerns and avoid bloated actors
- Define clear message path
- Evaluate behaviour without implementation

#+ATTR_REVEAL: :frag appear
Bonus: The actor model is easily mapped from a real world model.

** Supervision & Recovery
Without any strategy, actors can die and respawn without notice...

#+ATTR_REVEAL: :frag appear
For each actor, you need to define a clear strategy for:
#+ATTR_REVEAL: :frag (appear)
- Startup
- Shutdown
- Recovery
- Failure of its children

#+ATTR_REVEAL: :frag appear
Again, designing a hierarchy of actors will help in this process.

* Actor Reference

** Actor Reference 1/4
In a non-trivial architecture, you will need your actors to collaborate.

They will need to know each other (somehow).

** Actor Reference 2/4
Possible strategies:
#+ATTR_REVEAL: :frag (appear)
- Inject ActorRef in Actor constructor
- Let the Actors introduce themselves

#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC scala
case class IntroduceMe(someFriend: ActorRef, message: String)

class FriendlyActor(friend: ActorRef) extends Actor {
  override def preStart: Unit = {
    friend ! IntroduceMe(self, "Hi there !")
  }
  // ...
}
#+END_SRC

** Actor Reference 3/4
Alternate strategies:
#+ATTR_REVEAL: :frag (appear)
- Use ActorSelection
- Use a Registry

** Actor Reference 4/4
Avoid:
#+ATTR_REVEAL: :frag (appear)
- Injecting using Cake Pattern
- Using a global object containing references (Oh...My...!)

* Message
#+ATTR_REVEAL: :frag (appear)
- Messages need to be immutable: 
  - To prevent side effects
  - To avoid access exception
- And serializable if system is distributed

#+ATTR_REVEAL: :frag appear
Bonus: Scala offers =case class=, use them

** Message Path & Routing
Messages can be hard to track (to put it mildly)
#+ATTR_REVEAL: :frag (appear)
- Define them close to where they're used.
- Avoid complex routing or message over-encapsulation
- Prefer event sourcing over query pattern
- Design, design, design...

** Message & Actor consistency
Do not try to be accurate, best effort is almost always enough. It will be consistent eventually

* Future

** Mutable properties
Actors can mutate properties safely because when processing a message there is no concurrency.

However, you must make sure you are in the same context !

** Future & context
Inside a Future, you are no longer inside the Akka message processing context.

#+ATTR_REVEAL: :frag appear
#+BEGIN_SRC scala

object Doer {
  def doSomething(message: String): Future[String] = //...
}

class BadActor(friend: ActorRef) extends Actor {
  var lastMessage = ""
    
  override def receive = {
    case DoIt(message) =>
      // Oh No !!!
      Doer.doSomething(message).map(lastMessage = _)
  }
}
#+END_SRC

** Future & context - The good way
Avoid closure and use message to update Actor properties.

#+BEGIN_SRC scala
object Doer {
  def doSomething(message: String): Future[String] = //...
}

class GoodActor(friend: ActorRef) extends Actor {
  var lastMessage = ""
    
  override def receive = {
    case DoIt(message) =>
      Doer.doSomething(message).map(Message(_)).pipeTo(self)

    case Message(message) => lastMessage = message
    
    case akka.actor.Status.Failure(cause) => // Oops !
  }
}
#+END_SRC

* Misc

** EventBus 
Akka offers a generic event bus mechanism with a customizable classification.

Pretty cool but...

#+ATTR_REVEAL: :frag (appear)
- Memory hog when using multiple level of classification
- No death watch by default could lead to memory leak

** Testing - Black or White
[[./img/testing.png]]

- Black box: Send input, assert on output
- White box: Send input, assert on inner workings

** Refactoring
Refactoring can be difficult but some tips can help:

- Split concerns
- Clear message paths
- Lot of test
- Be explicit in tests (wording & coding)


** Ask Pattern, Queries, Command
- The ask pattern is convenient but returns a future so be cautious.
- When used, this pattern creates a temporary actor to handle your query.
- Is there another way ?
#+ATTR_REVEAL: :frag (appear)
  - If you use the pattern all over, you may need to change the design
  - Create a custom actor to handle this query

** Actor state

Akka offers convenient ways to handle state inside an actor:
#+ATTR_REVEAL: :frag (appear)
- context.become(whatYouAre): easy to use
- FSM: For advanced usage

** Coding with style...

#+ATTR_REVEAL: :frag (appear)
- Code consistency can be hard to maintain when evaluating patterns
- Mixing side-effect (injecting mutable object in an Actor)
- Monitoring will help
- Akka Cluster ?

* Conclusion

- And yet it works, despite all our mistakes...
- Designing you system is key
- You should read the doc ! http://doc.akka.io

** Thank you
Question ?

https://jpthomasset.github.io/slug-meetup-akka/

